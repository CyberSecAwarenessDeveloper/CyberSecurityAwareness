import pandas as pd
import numpy as np
import joblib
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer

datasets = {
    "malware_dataset": {
        "file": "data/malware_dataset.csv",
        "label": "Target Variable"
    },
    "cybersecurity_attacks": {
        "file": "data/cybersecurity_attacks.csv",
        "label": "Attack Type"
    },
    "text_threats": {
        "file": "data/text_threats.csv",
        "label": "label_1",
        "text": "text"
    }
}

output_dir = "models/trained_pipelines"
os.makedirs(output_dir, exist_ok=True)

for name, config in datasets.items():
    try:
        df = pd.read_csv(config["file"])
        if config.get("text"):
            df = df[[config["text"], config["label"]]].dropna()
            X = df[config["text"]].astype(str)
            from sklearn.feature_extraction.text import TfidfVectorizer
            vectorizer = TfidfVectorizer(max_features=3000)
            X = vectorizer.fit_transform(X).toarray()
        else:
            df = df.dropna(subset=[config["label"]])
            y = df[config["label"]].astype(str)
            X = df.drop(columns=[config["label"]])
            X = pd.get_dummies(X)
            imputer = SimpleImputer(strategy="mean")
            X = imputer.fit_transform(X)

        y = df[config["label"]].astype(str)
        encoder = LabelEncoder()
        y = encoder.fit_transform(y)

        X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

        model = GradientBoostingClassifier(n_estimators=200, learning_rate=0.1, max_depth=6, random_state=42)
        model.fit(X_train, y_train)
        accuracy = model.score(X_test, y_test)

        joblib.dump(model, os.path.join(output_dir, f"{name}_gb_model.pkl"))
        print(f"[{name}] ✅ Trained — Accuracy: {accuracy:.2f}")
    except Exception as e:
        print(f"[{name}] ❌ Failed: {e}")
